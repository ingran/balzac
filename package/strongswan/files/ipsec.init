#!/bin/sh /etc/rc.common
#/etc/init.d/ipsec - version 1 2015-10-01

NAME=ipsec

START=90
STOP=10

. /lib/functions.sh
ENABLED=0
KERNEL_LIB=0

File_ipsec="/tmp/ipsec/ipsec.conf"
File_secrets="/tmp/ipsec/ipsec.secrets"
File_strongswan="/tmp/ipsec/strongswan.conf"
File_firewall="/tmp/ipsec/firewall.sh"

LAN_IP="0.0.0.0/0"


checkifenabled() {
	config_get_bool enabled "$1" 'enabled' 0
	if [ $enabled -eq 1 ]; then
		ENABLED=1
	fi
}

prepare_ipsec_config() {
	echo "# generated by /etc/init.d/ipsec" >"$File_ipsec"
	echo "conn %default"  >>"$File_ipsec"
	echo "	rekeymargin=3m" >>"$File_ipsec"
	echo "" >>"$File_ipsec"
}

prepare_passthrough_section() {
	echo "conn passthrough"  >>"$File_ipsec"
	echo "	leftsubnet=$LAN_IP" >>"$File_ipsec"
	echo "	rightsubnet=$LAN_IP" >>"$File_ipsec"
	echo "	type=passthrough" >>"$File_ipsec"
	echo "	authby=never" >>"$File_ipsec"
	echo "	auto=route" >>"$File_ipsec"
	echo "" >>"$File_ipsec"
}

KeepAlive () {
	local address
	local period
	local keep_enabled
	local iface

	config_get keep_enabled "$1" keep_enabled "0"

	if [ "$keep_enabled" -eq 1 ]; then
		config_get address	"$1"	ping_ipaddr
		config_get period	"$1"	ping_period
		iface=`uci get -q network.lan.ipaddr`

		/sbin/keep_alive.sh $address $period $iface &
	fi
}

ConfigRemote() {
	config_get_bool enabled "$1" enabled 0
	[[ "$enabled" == "0" ]] && return

	auth="psk"
	config_get my_identifier_type	"$1" my_identifier_type ""
	config_get keyexchange	"$1" keyexchange "ikev1"
	config_get leftid	"$1" my_identifier ""

	config_get right	"$1" right ""
	config_get rightid	"$1" rightid ""
	config_get rightsubnet	"$1" rightsubnet
	config_get aggressive	"$1" aggressive
	config_get dpdaction	"$1" dpdaction
	config_get psk_key	"$1" psk_key

	config_get ike_encryption_algorithm	"$1" ike_encryption_algorithm
	config_get ike_authentication_algorithm	"$1" ike_authentication_algorithm
	config_get ike_dh_group			"$1" ike_dh_group
	config_get ikelifetime			"$1" ikelifetime "1h"

	config_get esp_encryption_algorithm	"$1" esp_encryption_algorithm
	config_get esp_hash_algorithm		"$1" esp_hash_algorithm
	config_get esp_pfs_group		"$1" esp_pfs_group
	config_get keylife			"$1" keylife "8h"

	echo "conn $1" >>"$File_ipsec"
	echo "	left=%any" >>"$File_ipsec"

	if [ "$my_identifier_type" == "fqdn" ]; then
		leftid="@$leftid"
	elif [ "$my_identifier_type" == "user_fqdn" ]; then
		leftid="@@$leftid"
	elif [ "$my_identifier_type" == "address" ]; then
		leftid="$leftid"
	else
		leftid="%any"
	fi

	if [ "$auth" == "psk" ]; then
		if [ "$leftid" != "" ]; then
			sec_leftid="$leftid"
		else
			sec_leftid="%any"
		fi
		if [ "$right" != "" ]; then
			echo "$sec_leftid $right : PSK \"$psk_key\" " >>"$File_secrets"
		else
			echo "$sec_leftid %any : PSK \"$psk_key\" " >>"$File_secrets"
		fi
	fi

	echo "	leftid=$leftid" >>"$File_ipsec"
	echo "	leftsubnet=$LAN_IP" >>"$File_ipsec"
	echo "	leftauth=$auth" >>"$File_ipsec"
	echo "	rightauth=$auth" >>"$File_ipsec"
	if [ "$right" != "" ]; then
		echo "	right=$right" >>"$File_ipsec"
	else
		echo "	right=%any" >>"$File_ipsec"
	fi

	if [ "$rightid" != "" ]; then
		echo "	rightid=$rightid" >>"$File_ipsec"
	else
		echo "	rightid=%any" >>"$File_ipsec"
	fi

	echo "	keyexchange=$keyexchange" >>"$File_ipsec"
	echo "	authby=secret" >>"$File_ipsec"
	echo "	leftfirewall=yes" >>"$File_ipsec"
	echo "	rightfirewall=yes" >>"$File_ipsec"
	echo "	auto=start" >>"$File_ipsec"
	echo "	type=tunnel" >>"$File_ipsec"
	echo "	aggressive=$aggressive" >>"$File_ipsec"

	echo "	dpdaction=$dpdaction" >>"$File_ipsec"
	echo "	closeaction=restart" >>"$File_ipsec"
	echo "	keyingtries=%forever" >>"$File_ipsec"

	echo "	ike=$ike_encryption_algorithm-$ike_authentication_algorithm-$ike_dh_group" >>"$File_ipsec"
	echo "	ikelifetime=$ikelifetime" >>"$File_ipsec"

	if [ "$esp_pfs_group" == "no_pfs" ]; then
		echo "	esp=$esp_encryption_algorithm-$esp_hash_algorithm" >>"$File_ipsec"
	else
		echo "	esp=$esp_encryption_algorithm-$esp_hash_algorithm-$esp_pfs_group" >>"$File_ipsec"
	fi
	echo "	keylife=$keylife" >>"$File_ipsec"

	right_item=0
	for item in $rightsubnet
	do
		if [ $item == "0.0.0.0/0" ]; then
			KERNEL_LIB=1
		fi
		echo "iptables -t nat -I zone_wan_postrouting -d $item -j ACCEPT" >>"$File_firewall"

		if [ $right_item -eq 0 ]; then
			echo "	rightsubnet=$item" >>"$File_ipsec"
			echo "" >>"$File_ipsec"
		else
			echo "conn $1_$right_item" >>"$File_ipsec"
			echo "	also=$1" >>"$File_ipsec"
			echo "	rightsubnet=$item" >>"$File_ipsec"
			echo "" >>"$File_ipsec"
		fi
		right_item=$(( $right_item + 1 ))
	done
	KeepAlive "$1"
}

prepare_strongswan_config(){
	echo "charon {" >"$File_strongswan"
	if [ $KERNEL_LIB -eq 0 ]; then
		echo "	load = charon aes des rc2 sha1 sha2 md5 random nonce x509 revocation constraints pubkey pkcs1 pgp dnskey sshkey pem fips-prf gmp xcbc hmac attr kernel-netlink resolve socket-default stroke updown xauth-generic" >>"$File_strongswan"
	else
		echo "	load = charon aes des rc2 sha1 sha2 md5 random nonce x509 revocation constraints pubkey pkcs1 pgp dnskey sshkey pem fips-prf gmp xcbc hmac attr kernel-netlink resolve socket-default stroke updown xauth-generic kernel-libipsec" >>"$File_strongswan"
	fi
	echo "	i_dont_care_about_security_and_use_aggressive_mode_psk = yes" >>"$File_strongswan"
	echo "}" >>"$File_strongswan"
}

chack_lan_ip() {
	lans=`route -n | grep br-lan`
	OLD_IFS=$IFS
	IFS=$'\n'
	for lan in $lans
	do
		br_lan=`echo $lan | awk -F ' ' '{print $1}'`
		lan_netmask=`echo $lan | awk -F ' ' '{print $3}'`
		lan_prefix=`ipcalc.sh $br_lan $lan_netmask | grep PREFIX | awk -F '=' '{print $2}'`
		if [ "$LAN_IP" == "0.0.0.0/0" ]; then
			LAN_IP="$br_lan/$lan_prefix"
		else
			LAN_IP="$LAN_IP,$br_lan/$lan_prefix"
		fi
	done
	IFS=$OLD_IFS
}

start() {
	config_load 'strongswan'
	config_foreach checkifenabled 'conn'
	[ $ENABLED -eq 0 ] && return 1

	mkdir -p /tmp/ipsec/
	echo "# generated by /etc/init.d/ipsec" >"$File_secrets"
	chack_lan_ip
	prepare_ipsec_config
	prepare_passthrough_section
	echo "# generated by /etc/init.d/ipsec" >"$File_firewall"
	config_foreach ConfigRemote 'conn'
	prepare_strongswan_config
	/usr/sbin/ipsec start &
}

reload() {
	stop
	start
}

stop() {
	/usr/sbin/ipsec stop
	rm -f "$File_firewall" "$File_secrets" "$File_ipsec"
}
